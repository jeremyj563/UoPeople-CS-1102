Well I obviously had a rough time last week as I didn't get any of my schoolwork done. I guess it is just an excuse but my wife and I are getting ready to have our third child which should hopefully be here tomorrow (scheduled induction). It has just been a lot more hectic and stressful lately as a result. Moving on.

So this week I had to do some catchup work mostly just working through the remainder of chapters five and six in the course book. Unfortunately there appears to be no way for me to go back and complete any of my missing assignments from last week :-(

I just finished my discussion post which really turned into a documentation writeup of the example code given (the MouseWhisperer class). I write a lot of technical documentation for the code I write at work so I guess writing step-by-step analyses just come naturally to me at this point. Plus I enjoy it.

I am trying to get all of my schoolwork done over the weekend since after tomorrow my time is going to be even more limited, obviously. I am thankful that there is no programming assignment this week but I am afraid I may be a bit rushed in completing the graded quiz. I am hopeful that I can still get an A in this class even though I missed a whole weeks worth of points last week.

Regarding the course content, I am glad that we are steadily diving deeper into OOP now tackling Interfaces and Polymorphism along with Inheritance and Encapsulation. These are the pillars of OO and from my experience it is incredibly satisfying once you actually start to "get" each of these concepts. Object oriented programming seems to get a lot of criticism these days but I feel that it is an incredibly enjoyable programming paradigm to work in. The key is to carefully think about the naming and purpose of each object, treating them as though they are real-world objects. When you do, the properties (or attributes) and methods (behavior) begin to pretty much write themselves. The concept of inheritance for code reuse in pretty fantastic, though lately I have been finding myself favoring composition over inheritance in the JavaScript world.

The concept of interfaces for polymorphic behavior is also super slick and lends itself to the natural way we interact with things in the real world every day. I think we often take this for granted but in reality every time we drive a car, use the TV remote or even sit in a chair, we are using some kind of interface. Objects in the real world each serve a purpose that is usually quite intuitive. This intuition comes from the fact that we understand each object's purpose simply because we've interacted with a similar object that served a similar purpose. That is all an interface is. In programming, the requirements for each type of interface are strict but that strictness is what makes swapping out different object implementations possible.

Until next week :-)