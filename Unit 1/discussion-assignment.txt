Syntax is a set of rules that must be followed by the programmer in order for the code to be readable (and compilable) by the language interpreter. In the case of Java, the compiler must be able to read and parse the code in order to produce bytecodes
to later be interpreted by the Java Virtual Machine (JVM).

Here is an example of a syntactically correct java program. The following code will compile and run just fine in any correctly implemented Java compiler:

  public class JavaFiddle
  {
    public static void main(String[] args) {
        String name = "UoPeople classmates";
        printGreeting(name);
    }
    
    public static void printGreeting(String target) {
        System.out.println("Hello " + target + "!");
    }
  }

Next is an example of some Java code with bad syntax. It will not be possible to compile this code for several reason including no encapsulating scope (no curly braces), incorrect case for both the "System" namespace and "String" type, and the use of single quotes (instead of double quotes) to wrap the string literals:

string name = 'peeps';
system.out.println('Hi ' + name + '!');

Semantics refer code that makes up a correct program. In other words, a sematically correct program will always arrive at the correct solution. For example, a Java function that is supposed to add two integers and return the result could be written like this:

public Integer add(Integer x, Integer y) {
    Integer sum = x + y;
    return sum;
}

And an semantically incorrect version of the "add" function might be written as follows. Notice how the code is *syntactically* (i.e. the code will compile) but it is not *symantically* correct (the function performs subtraction instead of addition):

public Integer add(Integer x, Integer y) {
    Integer sum = x - y;
    return sum;
}